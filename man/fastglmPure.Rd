% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_glm.R
\name{fastglmPure}
\alias{fastglmPure}
\title{fast generalized linear model fitting}
\usage{
fastglmPure(X, y, family = gaussian(), weights = rep(1, NROW(y)),
  offset = rep(0, NROW(y)), type = 0L, tol = 1e-07, maxit = 100L)
}
\arguments{
\item{X}{input model matrix. Must be a matrix object}

\item{y}{numeric response vector of length nobs.}

\item{family}{a description of the error distribution and link function to be used in the model. 
For \code{fastglmPure} this can only be the result of a call to a family function. 
(See \code{\link[stats]{family}} for details of family functions.)}

\item{weights}{an optional vector of 'prior weights' to be used in the fitting process. Should be a numeric vector.}

\item{offset}{this can be used to specify an a priori known component to be included in the linear predictor during fitting. 
This should be a numeric vector of length equal to the number of cases}

\item{type}{an integer scalar with value 0 for the column-pivoted QR decomposition, 1 for the unpivoted QR decomposition,
2 for the LLT Cholesky, or 3 for the LDLT Cholesky}

\item{tol}{threshold tolerance for convergence. Should be a positive real number}

\item{maxit}{maximum number of IRLS iterations. Should be an integer}
}
\value{
A list with the elements
\item{coefficients}{a vector of coefficients}
\item{se}{a vector of the standard errors of the coefficient estimates}
\item{rank}{a scalar denoting the computed rank of the model matrix}
\item{df.residual}{a scalar denoting the degrees of freedom in the model}
\item{residuals}{the vector of residuals}
\item{s}{a numeric scalar - the root mean square for residuals}
\item{fitted.values}{the vector of fitted values}
}
\description{
fast generalized linear model fitting
}
\examples{

x <- matrix(rnorm(10000 * 100), ncol = 100)
y <- 1 * (0.25 * x[,1] - 0.25 * x[,3] > rnorm(10000))

system.time(gl1 <- glm.fit(x, y, family = binomial()))

system.time(gf1 <- fastglmPure(x, y, family = binomial(), tol = 1e-8))

system.time(gf2 <- fastglmPure(x, y, family = binomial(), type = 1, tol = 1e-8))

system.time(gf3 <- fastglmPure(x, y, family = binomial(), type = 2, tol = 1e-8))

system.time(gf4 <- fastglmPure(x, y, family = binomial(), type = 3, tol = 1e-8))

max(abs(coef(gl1) - gf1$coef))
max(abs(coef(gl1) - gf2$coef))
max(abs(coef(gl1) - gf3$coef))
max(abs(coef(gl1) - gf4$coef))

}
